name: Compiler upgrades and dependencies check

on:
  workflow_dispatch: # on demand launches, if needed
  schedule:
    - cron: "5 0 * * 2" # 00:05 on Tuesday, near the dependabot.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Get the latest and second-latest versions of Tact compiler published on NPM
  # This job does not require checking out the repository
  get-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get versions
        id: versions
        run: |
          latest="$(npm view @tact-lang/compiler version)"
          second_latest="$(npm view @tact-lang/compiler versions --json | jq -r '.[-2]')"
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "second_latest=$second_latest" >> $GITHUB_OUTPUT
    outputs:
      latest: ${{ steps.versions.outputs.latest }}
      second_latest: ${{ steps.versions.outputs.second_latest }}

  # Test updates with upgrade commands given in the Tact docs
  test-upgrade:
    needs: get-versions
    env:
      LATEST: ${{ needs.get-versions.outputs.latest }}
      SECOND_LATEST: ${{ needs.get-versions.outputs.second_latest }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 22]
        os: [ubuntu-latest, windows-latest, macos-latest]
        package-manager: [npm, yarn, pnpm, bun]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          depth: 1 # the latest commit is enough

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: oven-sh/setup-bun@v2
        if: ${{ matrix.package-manager == 'bun' }}

      - name: Clone tact-template
        run: git clone --depth 1 https://github.com/tact-lang/tact-template

      - name: Project cleanup
        uses: ./.github/actions/node-project-cleanup
        with:
          cwd: tact-template

      - name: Install missing package managers
        working-directory: tact-template
        run: |
          # Yarn v1
          # NOTE: consider also adding yarn v4 to the mix (through corepack & node 20+)
          ${{ matrix.package-manager == 'yarn' && 'npm i -g yarn' || 'echo noop' }}
          # PNPM
          ${{ matrix.package-manager == 'pnpm' && 'npm i -g pnpm' || 'echo noop' }}

      - name: (Windows-${{ matrix.package-manager }}) Override a version using installation commands
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          PM: ${{ matrix.package-manager }}
        working-directory: tact-template
        run: |
          # Run the installation commands
          switch ($PM) {
            "npm" {
              # Install the second-latest version
              npm i --save-exact "@tact-lang/compiler@$env:SECOND_LATEST"
              # Update to the latest version (using the command from the docs)
              npm update --save "@tact-lang/compiler"
              # Following cases do the similar, but with a different package manager
              break
            }
            "yarn" {
              yarn add --exact "@tact-lang/compiler@$env:SECOND_LATEST"
              yarn upgrade "@tact-lang/compiler"
              break
            }
            "bun" {
              bun add --exact "@tact-lang/compiler@$env:SECOND_LATEST"
              bun update --latest "@tact-lang/compiler"
              break
            }
            "pnpm" {
              pnpm add --save-exact "@tact-lang/compiler@$env:SECOND_LATEST"
              pnpm upgrade "@tact-lang/compiler"
              break
            }
            default {
              Write-Host "Invalid input!"
              exit 1
            }
          }
          # Check that commands worked and the latest version is installed
          if ($(jq -r '.dependencies."@tact-lang/compiler"' package.json) -ne $env:LATEST) { exit 1 }

      - name: (non-Windows-${{ matrix.package-manager }}) Override a version using installation commands
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          PM: ${{ matrix.package-manager }}
        working-directory: tact-template
        run: |
          # Run the installation commands
          case "$PM" in
            npm)
              # Install the second-latest version
              npm i --save-exact "@tact-lang/compiler@$SECOND_LATEST"
              # Update to the latest version (using the command from the docs)
              npm update --save "@tact-lang/compiler"
              # Following cases do the similar, but with a different package manager
            yarn)
              yarn add --exact "@tact-lang/compiler@$SECOND_LATEST"
              yarn upgrade "@tact-lang/compiler"
              ;;
            bun)
              bun add --exact "@tact-lang/compiler@$SECOND_LATEST"
              bun update --latest "@tact-lang/compiler"
              ;;
            pnpm)
              pnpm add --save-exact "@tact-lang/compiler@$SECOND_LATEST"
              pnpm upgrade "@tact-lang/compiler"
              ;;
            *)
              echo "Invalid input!"
              exit 1
              ;;
          esac
          # Check that commands worked and the latest version is installed
          test $(jq -r '.dependencies."@tact-lang/compiler"' package.json) = "$LATEST"

  # Test overrides with install commands,
  # i.e. version pinning, as described in the Tact docs
  test-pin-version:
    needs: get-versions
    env:
      LATEST: ${{ needs.get-versions.outputs.latest }}
      SECOND_LATEST: ${{ needs.get-versions.outputs.second_latest }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 22]
        os: [ubuntu-latest, windows-latest, macos-latest]
        package-manager: [npm, yarn, pnpm, bun]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          depth: 1 # the latest commit is enough

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: oven-sh/setup-bun@v2
        if: ${{ matrix.package-manager == 'bun' }}

      - name: Clone tact-template
        run: git clone --depth 1 https://github.com/tact-lang/tact-template

      - name: Project cleanup
        uses: ./.github/actions/node-project-cleanup
        with:
          cwd: tact-template

      - name: Install missing package managers
        working-directory: tact-template
        run: |
          # Yarn v1
          # NOTE: consider also adding yarn v4 to the mix (through corepack & node 20+)
          ${{ matrix.package-manager == 'yarn' && 'npm i -g yarn' || 'echo noop' }}
          # PNPM
          ${{ matrix.package-manager == 'pnpm' && 'npm i -g pnpm' || 'echo noop' }}

      # --- NOTE: up until this point everything should be almost identical to test-upgrade job ---

      - name: (Windows-${{ matrix.package-manager }}) Override a version using installation commands
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          PM: ${{ matrix.package-manager }}
        working-directory: tact-template
        run: |
          # Run the installation commands
          switch ($PM) {
            "npm" {
              # Install the second-latest version
              npm i --save-exact "@tact-lang/compiler@$env:SECOND_LATEST"
              # Override it with the latest version (using the command from the docs)
              npm i --save-exact "@tact-lang/compiler@$env:LATEST"
              # Following cases do the similar, but with a different package manager
              break
            }
            "yarn" {
              yarn add --exact "@tact-lang/compiler@$env:SECOND_LATEST"
              yarn add --exact "@tact-lang/compiler@$env:LATEST"
              break
            }
            "bun" {
              bun add --exact "@tact-lang/compiler@$env:SECOND_LATEST"
              bun add --exact "@tact-lang/compiler@$env:LATEST"
              break
            }
            "pnpm" {
              pnpm add --save-exact "@tact-lang/compiler@$env:SECOND_LATEST"
              pnpm add --save-exact "@tact-lang/compiler@$env:LATEST"
              break
            }
            default {
              Write-Host "Invalid input!"
              exit 1
            }
          }
          # Check that commands worked and the latest version is installed
          if ($(jq -r '.dependencies."@tact-lang/compiler"' package.json) -ne $env:LATEST) { exit 1 }

      - name: (non-Windows-${{ matrix.package-manager }}) Override a version using installation commands
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          PM: ${{ matrix.package-manager }}
        working-directory: tact-template
        run: |
          # Run the installation commands
          case "$PM" in
            npm)
              # Install the second-latest version
              npm i --save-exact "@tact-lang/compiler@$SECOND_LATEST"
              # Override it with the latest version (using the command from the docs)
              npm i --save-exact "@tact-lang/compiler@$LATEST"
              # Following cases do the similar, but with a different package manager
            yarn)
              yarn add --exact "@tact-lang/compiler@$SECOND_LATEST"
              yarn add --exact "@tact-lang/compiler@$LATEST"
              ;;
            bun)
              bun add --exact "@tact-lang/compiler@$SECOND_LATEST"
              bun add --exact "@tact-lang/compiler@$LATEST"
              ;;
            pnpm)
              pnpm add --save-exact "@tact-lang/compiler@$SECOND_LATEST"
              pnpm add --save-exact "@tact-lang/compiler@$LATEST"
              ;;
            *)
              echo "Invalid input!"
              exit 1
              ;;
          esac
          # Check that commands worked and the latest version is installed
          test $(jq -r '.dependencies."@tact-lang/compiler"' package.json) = "$LATEST"
