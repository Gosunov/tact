name: "Node.js project cleanup"
description: "The action removes the dependency on the particular package manager, compiler and/or engines from the package.json. It also removes all lockfiles and any installed dependencies in node_modules. But it does not setup Node.js nor installs dependencies."

inputs:
  cwd:
    description: "A directory with a Node.js project to clean up"
    required: false
    default: "." # i.e. present working directory

  pj-remove-compiler:
    description: "Whether to remove a dependency on the compiler from package.json"
    required: false
    default: "true" # any other string is considered `false`

  pj-remove-pm:
    description: "Whether to remove the packageManager field from package.json"
    required: false
    default: "true" # any other string is considered `false`

  pj-remove-engines:
    description: "Whether to remove the engines field from package.json"
    required: false
    default: "true" # any other string is considered `false`

  remove-lockfiles:
    description: "Whether to remove the lockfiles produced by popular Node.js package managers, such as: npm, bun, yarn and pnpm"
    required: false
    default: "true" # any other string is considered `false`

  remove-node-modules:
    description: "Whether to remove the node_modules folder"
    required: false
    default: "true" # any other string is considered `false`

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: (Windows) Cleanup
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: ${{ inputs.cwd }}
      env:
        PJ_REMOVE_COMPILER: ${{ inputs.pj-remove-compiler }}
        PJ_REMOVE_PM: ${{ inputs.pj-remove-pm }}
        PJ_REMOVE_ENGINES: ${{ inputs.pj-remove-engines }}
        REMOVE_LOCKFILES: ${{ inputs.remove-lockfiles }}
        REMOVE_NODE_MODULES: ${{ inputs.remove-node-modules }}
      run: |
        $ErrorActionPreference = 'Stop'

        # Conditionally remove any lockfiles:
        # yarn and bun (text), bun (binary), npm, pnpm
        if ($env:REMOVE_LOCKFILES -eq "true") {
          Remove-Item -Path "*.lock", "bun.lockb", "package-lock.json", "pnpm-lock.yaml" -Force
        }

        # Conditionally remove any installed dependencies
        if ($env:REMOVE_NODE_MODULES -eq "true") {
          Remove-Item -Path "node_modules" -Recurse -Force
        }

        ##
        # Conditionally remove certain fields from package.json
        ##

        if ($env:PJ_REMOVE_COMPILER -eq "true") {
          # Removes the "@tact-lang/compiler" field from every topmost object,
          # which is handy to remove it from dependencies, devDependencies, etc.
          # — all at once!
          jq 'to_entries | map(if .value | type == "object" then .value |= del(."@tact-lang/compiler") else . end) | from_entries' package.json -M | Set-Content temp.json
          Move-Item temp.json package.json -Force
        }

        if ($env:PJ_REMOVE_PM -eq "true") {
          jq 'del(.packageManager)' package.json -M | Set-Content temp.json
          Move-Item temp.json package.json -Force
        }

        if ($env:PJ_REMOVE_ENGINES -eq "true") {
          jq 'del(.engines)' package.json -M | Set-Content temp.json
          Move-Item temp.json package.json -Force
        }

    - name: (non-Windows) Cleanup
      if: runner.os != 'Windows'
      shell: bash
      working-directory: ${{ inputs.cwd }}
      env:
        PJ_REMOVE_COMPILER: ${{ inputs.pj-remove-compiler }}
        PJ_REMOVE_PM: ${{ inputs.pj-remove-pm }}
        PJ_REMOVE_ENGINES: ${{ inputs.pj-remove-engines }}
        REMOVE_LOCKFILES: ${{ inputs.remove-lockfiles }}
        REMOVE_NODE_MODULES: ${{ inputs.remove-node-modules }}
      run: |
        # Conditionally remove any lockfiles:
        # yarn and bun (text), bun (binary), npm, pnpm
        if [ "$REMOVE_LOCKFILES" = "true" ]; then
          rm -f *.lock bun.lockb package-lock.json pnpm-lock.yaml
        fi

        # Conditionally remove any installed dependencies
        if [ "$REMOVE_NODE_MODULES" = "true" ]; then
          rm -rf node_modules
        fi

        ##
        # Conditionally remove certain fields from package.json
        ##

        if [ "$PJ_REMOVE_COMPILER" = "true" ]; then
          # Removes the "@tact-lang/compiler" field from every topmost object,
          # which is handy to remove it from dependencies, devDependencies, etc.
          # — all at once!
          jq 'to_entries | map(if .value | type == "object" then .value |= del(."@tact-lang/compiler") else . end) | from_entries' package.json -M > temp.json
          mv -f temp.json package.json
        fi

        if [ "$PJ_REMOVE_PM" = "true" ]; then
          jq 'del(.packageManager)' package.json -M > temp.json
          mv -f temp.json package.json
        fi

        if [ "$PJ_REMOVE_ENGINES" = "true" ]; then
          jq 'del(.engines)' package.json -M > temp.json
          mv -f temp.json package.json
        fi
