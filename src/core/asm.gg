// order is important: sort by size descending
// make a &"A" prefetch

"ADD" / "AGAIN" / "AGAINEND" / "AND" / "BLKSWX" / "CHKDEPTH" / "CHKNAN" / "CMP" / "CTOS" / "DEC" / "DEPTH" /
"DROP" / "DROPX" / "DUP" / "ENDC" / "ENDCST" / "ENDS" / "EQUAL" / "EXECUTE" / "GEQ" / "GREATER" / "IF" /
"IFELSE" / "IFJMP" / "IFNOT" / "IFNOTJMP" / "IFNOTRET" / "IFRET" / "INC" / "ISNAN" / "ISNULL" / "JMPX" /
"LDREF" / "LDREFRTOS" / "LEQ" / "LESS" / "MUL" / "NEGATE" / "NEQ" / "NEWC" / "NIP" / "NOP" / "NOT" /
"ONLYTOPX" / "ONLYX" / "OR" / "OVER" / "PICK" / "POW2" / "PUSHNULL" / "REPEAT" / "REPEATEND" / "REVX" /
"ROLL" / "ROLLREV" / "ROT" / "ROTREV" / "SGN" / "SUB" / "SUBR" / "SWAP" / "TUCK" / "UNTIL" / "UNTILEND" /
"WHILE" / "WHILEEND" / "XCHGX"

"ABS" / "ACCEPT" / "ADDDIVMOD" / "ADDDIVMODC" / "ADDDIVMODR" / "ADDRAND" / "ADDRSHIFTMOD" / "ADDRSHIFTMODC" /
"ADDRSHIFTMODR" / "AGAINBRK" / "AGAINENDBRK" / "ATEXIT" / "ATEXITALT" / "BALANCE" / "BBITREFS" / "BBITS" /
"BCHKBITREFS" / "BCHKBITREFSQ" / "BCHKREFS" / "BCHKREFSQ" / "BDEPTH" / "BITSIZE" / "BLESS" / "BLESSVARARGS" /
"BLOCKLT" / "BOOLAND" / "BOOLEVAL" / "BOOLOR" / "BREFS" / "BREMBITREFS" / "BREMBITS" / "BREMREFS" / "CALLCC" /
"CALLCCVARARGS" / "CALLXVARARGS" / "CDATASIZE" / "CDATASIZEQ" / "CDEPTH" / "CDEPTHIX" / "CHANGELIB" / "CHASHIX" /
"CHKSIGNS" / "CHKSIGNU" / "CLEVEL" / "CLEVELMASK" / "COMMIT" / "COMPOSBOTH" / "CONDSEL" / "CONDSELCHK" / "CONFIGDICT" /
"CONFIGOPTPARAM" / "CONFIGPARAM" / "CONFIGROOT" / "DICTADD" / "DICTADDB" / "DICTADDGET" / "DICTADDGETB" /
"DICTADDGETREF" / "DICTADDREF" / "DICTDEL" / "DICTDELGET" / "DICTDELGETREF" / "DICTGET" / "DICTGETNEXT" /
"DICTGETNEXTEQ" / "DICTGETOPTREF" / "DICTGETPREV" / "DICTGETPREVEQ" / "DICTGETREF" / "DICTIADD" / "DICTIADDB" /
"DICTIADDGET" / "DICTIADDGETB" / "DICTIADDGETREF" / "DICTIADDREF" / "DICTIDEL" / "DICTIDELGET" / "DICTIDELGETREF" /
"DICTIGET" / "DICTIGETEXEC" / "DICTIGETEXECZ" / "DICTIGETJMP" / "DICTIGETJMPZ" / "DICTIGETNEXT" / "DICTIGETNEXTEQ" /
"DICTIGETOPTREF" / "DICTIGETPREV" / "DICTIGETPREVEQ" / "DICTIGETREF" / "DICTIMAX" / "DICTIMAXREF" / "DICTIMIN" /
"DICTIMINREF" / "DICTIREMMAX" / "DICTIREMMAXREF" / "DICTIREMMIN" / "DICTIREMMINREF" / "DICTIREPLACE" /
"DICTIREPLACEB" / "DICTIREPLACEGET" / "DICTIREPLACEGETB" / "DICTIREPLACEGETREF" / "DICTIREPLACEREF" / "DICTISET" /
"DICTISETB" / "DICTISETGET" / "DICTISETGETB" / "DICTISETGETOPTREF" / "DICTISETGETREF" / "DICTISETREF" / "DICTMAX" /
"DICTMAXREF" / "DICTMIN" / "DICTMINREF" / "DICTREMMAX" / "DICTREMMAXREF" / "DICTREMMIN" / "DICTREMMINREF" /
"DICTREPLACE" / "DICTREPLACEB" / "DICTREPLACEGET" / "DICTREPLACEGETB" / "DICTREPLACEGETREF" / "DICTREPLACEREF" /
"DICTSET" / "DICTSETB" / "DICTSETGET" / "DICTSETGETB" / "DICTSETGETOPTREF" / "DICTSETGETREF" / "DICTSETREF" /
"DICTUADD" / "DICTUADDB" / "DICTUADDGET" / "DICTUADDGETB" / "DICTUADDGETREF" / "DICTUADDREF" / "DICTUDEL" /
"DICTUDELGET" / "DICTUDELGETREF" / "DICTUGET" / "DICTUGETEXEC" / "DICTUGETEXECZ" / "DICTUGETJMP" / "DICTUGETJMPZ" /
"DICTUGETNEXT" / "DICTUGETNEXTEQ" / "DICTUGETOPTREF" / "DICTUGETPREV" / "DICTUGETPREVEQ" / "DICTUGETREF" / "DICTUMAX" /
"DICTUMAXREF" / "DICTUMIN" / "DICTUMINREF" / "DICTUREMMAX" / "DICTUREMMAXREF" / "DICTUREMMIN" / "DICTUREMMINREF" /
"DICTUREPLACE" / "DICTUREPLACEB" / "DICTUREPLACEGET" / "DICTUREPLACEGETB" / "DICTUREPLACEGETREF" / "DICTUREPLACEREF" /
"DICTUSET" / "DICTUSETB" / "DICTUSETGET" / "DICTUSETGETB" / "DICTUSETGETOPTREF" / "DICTUSETGETREF" / "DICTUSETREF" /
"DIV" / "DIVC" / "DIVMOD" / "DIVMODC" / "DIVMODR" / "DIVR" / "DUEPAYMENT" / "ECRECOVER" / "ENDXC" / "EXPLODEVAR" /
"FITSX" / "GASCONSUMED" / "GETFORWARDFEE" / "GETFORWARDFEESIMPLE" / "GETGASFEE" / "GETGASFEESIMPLE" / "GETGLOBVAR" /
"GETORIGINALFWDFEE" / "GETPRECOMPILEDGAS" / "GETSTORAGEFEE" / "GLOBALID" / "HASHCU" / "HASHSU" / "IFNOTRETALT" /
"IFRETALT" / "INCOMINGVALUE" / "INDEXVAR" / "INDEXVARQ" / "INVERT" / "ISTUPLE" / "JMPXDATA" / "JMPXVARARGS" / "LAST" /
"LDDICT" / "LDDICTQ" / "LDDICTS" / "LDGRAMS" / "LDILE4" / "LDILE4Q" / "LDILE8" / "LDILE8Q" / "LDIX" / "LDIXQ" /
"LDMSGADDR" / "LDMSGADDRQ" / "LDONES" / "LDSAME" / "LDSLICEX" / "LDSLICEXQ" / "LDULE4" / "LDULE4Q" / "LDULE8" /
"LDULE8Q" / "LDUX" / "LDUXQ" / "LDVARINT16" / "LDVARINT32" / "LDVARUINT32" / "LDZEROES" / "LSHIFTADDDIVMOD" /
"LSHIFTADDDIVMODC" / "LSHIFTADDDIVMODR" / "LSHIFTDIV" / "LSHIFTDIVC" / "LSHIFTDIVMOD" / "LSHIFTDIVMODC" /
"LSHIFTDIVMODR" / "LSHIFTDIVR" / "LSHIFTMOD" / "LSHIFTMODC" / "LSHIFTMODR" / "LTIME" / "MAX" / "MIN" / "MINMAX" /
"MOD" / "MODC" / "MODPOW2" / "MODPOW2C" / "MODPOW2R" / "MODR" / "MULADDDIVMOD" / "MULADDDIVMODC" / "MULADDDIVMODR" /
"MULADDRSHIFTCMOD" / "MULADDRSHIFTMOD" / "MULADDRSHIFTRMOD" / "MULDIV" / "MULDIVC" / "MULDIVMOD" / "MULDIVMODC" /
"MULDIVMODR" / "MULDIVR" / "MULMOD" / "MULMODC" / "MULMODPOW2" / "MULMODPOW2C" / "MULMODPOW2R" / "MULMODR" /
"MULRSHIFT" / "MULRSHIFTC" / "MULRSHIFTCMOD" / "MULRSHIFTMOD" / "MULRSHIFTR" / "MULRSHIFTRMOD" / "MYADDR" / "MYCODE" /
"NOW" / "NULLROTRIF" / "NULLROTRIF2" / "NULLROTRIFNOT" / "NULLROTRIFNOT2" / "NULLSWAPIF" / "NULLSWAPIF2" /
"NULLSWAPIFNOT" / "NULLSWAPIFNOT2" / "P256_CHKSIGNS" / "P256_CHKSIGNU" / "PARSEMSGADDR" / "PARSEMSGADDRQ" /
"PFXDICTADD" / "PFXDICTDEL" / "PFXDICTGET" / "PFXDICTGETEXEC" / "PFXDICTGETJMP" / "PFXDICTGETQ" / "PFXDICTREPLACE" /
"PFXDICTSET" / "PLDDICT" / "PLDDICTQ" / "PLDDICTS" / "PLDILE4" / "PLDILE4Q" / "PLDILE8" / "PLDILE8Q" / "PLDIX" /
"PLDIXQ" / "PLDREFVAR" / "PLDSLICEX" / "PLDSLICEXQ" / "PLDULE4" / "PLDULE4Q" / "PLDULE8" / "PLDULE8Q" / "PLDUX" /
"PLDUXQ" / "POPCTRX" / "PREVBLOCKSINFOTUPLE" / "PUSHCTRX" / "PUSHNAN" / "QADD" / "QAND" / "QCMP" / "QDEC" / "QEQUAL" /
"QGEQ" / "QGREATER" / "QINC" / "QLEQ" / "QLESS" / "QMUL" / "QNEGATE" / "QNEQ" / "QNOT" / "QOR" / "QPOW2" / "QSGN" /
"QSUB" / "QSUBR" / "QTLEN" / "QXOR" / "RAND" / "RANDSEED" / "RANDU256" / "RAWRESERVE" / "RAWRESERVEX" / "REPEATBRK" 
"REPEATENDBRK" / "RET" / "RETALT" / "RETBOOL" / "RETDATA" / "RETURNVARARGS" / "RETVARARGS" / "REWRITESTDADDR" /
"REWRITESTDADDRQ" / "REWRITEVARADDR" / "REWRITEVARADDRQ" / "RIST255_ADD" / "RIST255_FROMHASH" / "RIST255_MUL" /
"RIST255_MULBASE" / "RIST255_PUSHL" / "RIST255_SUB" / "RIST255_VALIDATE" / "RSHIFTC" / "RSHIFTMOD" / "RSHIFTMODC" /
"RSHIFTMODR" / "RSHIFTR" / "RUNVMX" / "SAMEALT" / "SAMEALTSAVE" / "SBITREFS" / "SBITS" / "SCHKBITREFS" /
"SCHKBITREFSQ" / "SCHKBITS" / "SCHKBITSQ" / "SCHKREFS" / "SCHKREFSQ" / "SCUTFIRST" / "SCUTLAST" / "SDATASIZE" /
"SDATASIZEQ" / "SDBEGINSX" / "SDBEGINSXQ" / "SDCNTLEAD0" / "SDCNTLEAD1" / "SDCNTTRAIL0" / "SDCNTTRAIL1" /
"SDCUTFIRST" / "SDCUTLAST" / "SDEMPTY" / "SDEPTH" / "SDEQ" / "SDFIRST" / "SDLEXCMP" / "SDPFX" / "SDPFXREV" / "SDPPFX" /
"SDPPFXREV" / "SDPSFX" / "SDPSFXREV" / "SDSFX" / "SDSFXREV" / "SDSKIPFIRST" / "SDSKIPLAST" / "SDSUBSTR" /
"SECP256K1_XONLY_PUBKEY_TWEAK_ADD" / "SEMPTY" / "SENDMSG" / "SENDRAWMSG" / "SETCODE" / "SETCONTCTRMANYX" /
"SETCONTCTRX" / "SETCONTVARARGS" / "SETCPX" / "SETEXITALT" / "SETGASLIMIT" / "SETGLOBVAR" / "SETINDEXVAR" /
"SETINDEXVARQ" / "SETLIBCODE" / "SETNUMVARARGS" / "SETRAND" / "SHA256U" / "SKIPDICT" / "SPLIT" / "SPLITQ" / "SREFS" /
"SREMPTY" / "SSKIPFIRST" / "SSKIPLAST" / "STB" / "STBQ" / "STBR" / "STBREF" / "STBREFQ" / "STBREFR" / "STBREFRQ" /
"STBRQ" / "STDICT" / "STGRAMS" / "STILE4" / "STILE8" / "STIX" / "STIXQ" / "STIXR" / "STIXRQ" / "STONES" /
"STORAGEFEES" / "STREFQ" / "STREFR" / "STREFRQ" / "STSAME" / "STSLICEQ" / "STSLICER" / "STSLICERQ" / "STULE4" /
"STULE8" / "STUX" / "STUXQ" / "STUXR" / "STUXRQ" / "STVARINT16" / "STVARINT32" / "STVARUINT32" / "STZEROES" /
"SUBDICTGET" / "SUBDICTIGET" / "SUBDICTIRPGET" / "SUBDICTRPGET" / "SUBDICTUGET" / "SUBDICTURPGET" / "SUBSLICE" /
"THENRET" / "THENRETALT" / "THROWANY" / "THROWANYIFNOT" / "THROWARGANY" / "THROWARGANYIFNOT" / "TLEN" / "TPOP" /
"TPUSH" / "TRY" / "TUPLEVAR" / "UBITSIZE" / "UFITSX" / "UNPACKEDCONFIGTUPLE" / "UNPACKFIRSTVAR" / "UNTILBRK" /
"UNTILENDBRK" / "UNTUPLEVAR" / "WHILEBRK" / "WHILEENDBRK" / "XCTOS" / "XLOAD" / "XLOADQ"

"BLS_AGGREGATE" / "BLS_AGGREGATEVERIFY" / "BLS_FASTAGGREGATEVERIFY" / "BLS_G1_ADD" / "BLS_G1_INGROUP" /
"BLS_G1_ISZERO" / "BLS_G1_MUL" / "BLS_G1_MULTIEXP" / "BLS_G1_NEG" / "BLS_G1_SUB" / "BLS_G1_ZERO" / "BLS_G2_ADD" /
"BLS_G2_INGROUP" / "BLS_G2_ISZERO" / "BLS_G2_MUL" / "BLS_G2_MULTIEXP" / "BLS_G2_NEG" / "BLS_G2_SUB" / "BLS_G2_ZERO" /
"BLS_MAP_TO_G1" / "BLS_MAP_TO_G2" / "BLS_PAIRING" / "BLS_PUSHR" / "BLS_VERIFY" / "PREVKEYBLOCK" / "PREVMCBLOCKS" /
"PREVMCBLOCKS_100" / "QABS" / "QADDDIVMOD" / "QADDDIVMODC" / "QADDDIVMODR" / "QADDRSHIFTMOD" / "QADDRSHIFTMODC" /
"QADDRSHIFTMODR" / "QBITSIZE" / "QDIV" / "QDIVC" / "QDIVMOD" / "QDIVMODC" / "QDIVMODR" / "QDIVR" / "QFITSX" /
"QLSHIFTADDDIVMOD" / "QLSHIFTADDDIVMODC" / "QLSHIFTADDDIVMODR" / "QLSHIFTDIV" / "QLSHIFTDIVC" / "QLSHIFTDIVMOD" /
"QLSHIFTDIVMODC" / "QLSHIFTDIVMODR" / "QLSHIFTDIVR" / "QLSHIFTMOD" / "QLSHIFTMODC" / "QLSHIFTMODR" / "QMAX" / "QMIN" /
"QMINMAX" / "QMOD" / "QMODC" / "QMODPOW2" / "QMODPOW2C" / "QMODPOW2R" / "QMODR" / "QMULADDDIVMOD" / "QMULADDDIVMODC" /
"QMULADDDIVMODR" / "QMULADDRSHIFTCMOD" / "QMULADDRSHIFTMOD" / "QMULADDRSHIFTRMOD" / "QMULDIV" / "QMULDIVC" /
"QMULDIVMOD" / "QMULDIVMODC" / "QMULDIVMODR" / "QMULDIVR" / "QMULMOD" / "QMULMODC" / "QMULMODPOW2" / "QMULMODPOW2C" /
"QMULMODPOW2R" / "QMULMODR" / "QMULRSHIFT" / "QMULRSHIFTC" / "QMULRSHIFTCMOD" / "QMULRSHIFTMOD" / "QMULRSHIFTR" /
"QMULRSHIFTRMOD" / "QRSHIFTC" / "QRSHIFTMOD" / "QRSHIFTMODC" / "QRSHIFTMODR" / "QRSHIFTR" / "QUBITSIZE" / "QUFITSX" /
"RIST255_QADD" / "RIST255_QMUL" / "RIST255_QMULBASE" / "RIST255_QSUB" / "RIST255_QVALIDATE"

seq1(int(8))
"ADDINT" / "MULINT" / "QADDINT" / "QMULINT" / "EQINT" / "LESSINT" / "GTINT" / "NEQINT" / "QEQINT" / "QLESSINT" / "QGTINT" / "QNEQINT"

// 0..239, -15..-1
"SETCP" int

seq1(uint)
"PUSHPOW2DEC" / "PUSHNEGPOW2" / "FITS" / "UFITS" / "QFITS" / "QUFITS" / "SETCONTCTRMANY" / "STIR" / "STUR" / "STIQ" /
"STUQ" / "STIRQ" / "STURQ" / "PLDI" / "PLDU" / "LDIQ" / "LDUQ" / "PLDIQ" / "PLDUQ" / "PLDSLICE" / "LDSLICEQ" / "PLDSLICEQ" /
"PLDREFIDX" / "CHASHI" / "CDEPTHI" / "JMPDICT" / "PREPAREDICT" / "THROWARG" / "THROWARGIF" / "THROWARGIFNOT" / "JMPXARGS" /
"RETARGS" / "RETURNARGS" / "BLKDROP" / "TUPLE" / "INDEX" / "UNTUPLE" / "UNPACKFIRST" / "EXPLODE" /
"SETINDEX" / "INDEXQ" / "SETINDEXQ" / "IFBITJMP" / "IFNBITJMP" / "PUSHPOW2" / "GETGLOB" / "SETGLOB" / "GETPARAM"

seq2(uint, uint)
"CALLCCARGS" / "TRYARGS" / "BLKPUSH" / "BLKDROP2" / "BLKSWAP" / "REVERSE" / "SETCONTARGS" / "BLESSARGS" / "INDEX2" / "DICTPUSHCONST" / "PFXDICTSWITCH"

seq3(uint, uint, uint)
"INDEX3"

seq2(stack, stack)
"XCHG2" / "XCPU" / "PUSH2" / "PUXC"

seq3(stack, stack, stack), 
"XCPUXC" / "PUXC2" / "PUXCPU" / "PU2XC" / "XC2PU" / "XCPU2" / "PUSH3"

seq1(plduzArg)
"PLDUZ"

seq1(control)
"SETCONTCTR" / "SETRETCTR" / "SETALTCTR" / "POPSAVE" / "SAVECTR" / "SAVEALTCTR" / "SAVEBOTHCTR"

RUNVM seq1(runvmArg)

ref
"PUSHREF" / "PUSHREFSLICE" / "PUSHREFCONT" / "CALLREF" / "JMPREF" / "JMPREFDATA" / "IFREF" / "IFNOTREF" / 
"IFJMPREF" / "IFNOTJMPREF" / "IFREFELSE" / "IFELSEREF"

IFREFELSEREF ref ref

SDBEGINS: slice(uint, 3)
SDBEGINSQ: slice(uint, 3)

IFBITJMPREF seq1(uint) ref
IFNBITJMPREF seq1(uint) ref

STREFCONST ref
STREF2CONST ref ref

THROWANYIF
THROWARGANYIF
DEBUGSTR slice(uint, 0)

// special case: numeric
"2SWAP" / "2DROP" / "2DUP" / "2OVER"

// special case: # opcodes
seq1(uint)
"ADDRSHIFT#MOD" / "ADDRSHIFTR#MOD" / "ADDRSHIFTC#MOD" / "RSHIFT#" / "RSHIFTR#" / "RSHIFTC#" / "MODPOW2#" / "MODPOW2R#" / "MODPOW2C#" /
"RSHIFT#MOD" / "RSHIFTR#MOD" / "RSHIFTC#MOD" / "MULADDRSHIFT#MOD" / "MULADDRSHIFTR#MOD" / "MULADDRSHIFTC#MOD" / "MULRSHIFT#" /
"MULRSHIFTR#" / "MULRSHIFTC#" / "MULMODPOW2#" / "MULMODPOW2R#" / "MULMODPOW2C#" / "MULRSHIFT#MOD" / "MULRSHIFTR#MOD" / "MULRSHIFTC#MOD" /
"LSHIFT#ADDDIVMOD" / "LSHIFT#ADDDIVMODR" / "LSHIFT#ADDDIVMODC" / "LSHIFT#DIV" / "LSHIFT#DIVR" / "LSHIFT#DIVC" / "LSHIFT#MOD" /
"LSHIFT#MODR" / "LSHIFT#MODC" / "LSHIFT#DIVMOD" / "LSHIFT#DIVMODR" / "LSHIFT#DIVMODC"

// special case: named argument
seq1(hash)
"HASHEXT" / "HASHEXTR" / "HASHEXTA" / "HASHEXTAR"

// special case: meaningless long opcodes
STREF "LONG"?
STSLICE "LONG"?
XCHG3 "LONG"? seq3(stack, stack, stack)
STI "LONG"? seq1(uint)
STU "LONG"? seq1(uint)
LDI "LONG"? seq1(uint)
LDU "LONG"? seq1(uint)
LDSLICE "LONG"? seq1(uint)

// special case: with or without arg
LSHIFT seq1(uint)?
QLSHIFT seq1(uint)?
BCHKBITS seq1(uint)?
BCHKBITSQ seq1(uint)?

// special case: combination of two above: long version + numbered version
RSHIFT (seq1(uint) / "LONG")?
QRSHIFT (seq1(uint) / "LONG")?

// special case: long and short versions
CALLDICT ("SHORT" / "LONG")? seq1(uint)
THROW ("SHORT" / "LONG")? seq1(uint)
THROWIF ("SHORT" / "LONG")? seq1(uint)
THROWIFNOT ("SHORT" / "LONG")? seq1(uint)

PUSHINT: mkfixedn(0x7, 4, 4, seq1(tinyInt))
PUSHINT: mkfixedn(0x80, 8, 8, seq1(int(8)))
PUSHINT: mkfixedn(0x81, 8, 16, seq1(int(16)))
PUSHINT: mkextrange(0, 0x820 << 1, (0x820 << 1) + 31, 13, 5, largeInt)

XCHG: mkfixedn(0x11, 8, 8, stack)
XCHG: mkfixedn(0x10, 8, 8, xchgArgs)
XCHG: mkfixedrangen(0x02, 0x10, 8, 4, seq1(stack))
XCHG: mkfixedrangen(0x12, 0x20, 8, 4, seq2(s1, stack))

// special case: opcode with holes
DUMPSTK
STRDUMP
DUMP seq1(stack)
DEBUG seq1(uint)

// PUSH c*
// PUSH c6 -> ошибка
// PUSH s*
// PUSH SHORT s*
// PUSH LONG s*
PUSH: mkfixedrangen(0xed40, 0xed48, 16, 4, seq1(control))
PUSH: mkfixedn(0x56, 8, 8, seq1(stack))
PUSH: mkfixedrangen(0x22, 0x30, 8, 4, seq1(stack))

POP: mkfixedrangen(0xed50, 0xed58, 16, 4, seq1(control))
POP: mkfixedn(0x57, 8, 8, seq1(stack))
POP: mkfixedrangen(0x32, 0x40, 8, 4, seq1(stack))

"CALLXARGS" seq2(uint, "-1" | uint)

// SLICE
PUSHSLICE: (0, 4, slice)
PUSHSLICE: (1, 5, slice)
PUSHSLICE: (2, 5, slice)
PUSHSLICE: (3, 5, slice)
PUSHSLICE: (4, 5, slice)
PUSHSLICE: (0, 7, slice)
PUSHSLICE: (1, 7, slice)
PUSHSLICE: (2, 7, slice)
PUSHSLICE: (3, 7, slice)
PUSHSLICE: (4, 7, slice)

// CONT
PUSHCONT: (0, 7, slice)
PUSHCONT: (1, 7, slice)
PUSHCONT: (2, 7, slice)
PUSHCONT: (3, 7, slice)
PUSHCONT: (0, 4, slice)

STSLICECONST: (0, 3, slice)
STSLICECONST: (1, 3, slice)
STSLICECONST: (2, 3, slice)
STSLICECONST: (3, 3, slice)
